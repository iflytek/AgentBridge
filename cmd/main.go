package main

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
)

const (
	version     = "v1.0.0"
	appName     = "AI Agents Transformer"
	description = "Cross-Platform AI Agent DSL Converter"
)

var (
	// Global flags
	verbose bool
	quiet   bool
)

var rootCmd = &cobra.Command{
	Use:   "ai-agent-converter",
	Short: description,
	Long: `ðŸš€ AI Agents Transformer - Cross-Platform AI Agent DSL Converter

Cross-platform AI agent workflow DSL converter with iFlytek Spark as the central hub, supporting bidirectional conversion between Spark, Dify, and Coze platforms.

âœ¨ Features:
  â€¢ Bidirectional conversion with data integrity guarantee
  â€¢ 7 node types support (start, end, llm, code, condition, classifier, iteration)
  â€¢ Variable reference resolution and transformation
  â€¢ Platform-specific configuration preservation
  â€¢ Three-stage validation pipeline (structural, semantic, platform)
  â€¢ Unsupported node placeholder conversion mechanism

ðŸŽ¯ Supported Conversion Paths:
  â€¢ iFlytek Spark â†” Dify Platform    âœ… Production Ready
  â€¢ iFlytek Spark â†” Coze Platform    âœ… Production Ready
  â€¢ ZIP Format Support for Coze      âœ… Production Ready

ðŸ”§ Enterprise Features:
  â€¢ Structured logging system
  â€¢ Configuration management  
  â€¢ Error handling and recovery
  â€¢ Performance optimization`,
	Version: version,
	Example: `  # Basic conversion (iFlytek to Dify)
  ai-agent-converter convert --from iflytek --to dify --input agent.yml --output dify.yml

  # Convert iFlytek to Coze
  ai-agent-converter convert --from iflytek --to coze --input agent.yml --output coze.yml

  # Convert Coze ZIP to iFlytek
  ai-agent-converter convert --from coze --to iflytek --input workflow.zip --output agent.yml

  # Auto-detect source format
  ai-agent-converter convert --to coze --input agent.yml --output coze.yml

  # Validate DSL file
  ai-agent-converter validate --input agent.yml

  # Show supported node types
  ai-agent-converter info --nodes`,
}

func init() {
	// Configure global flags
	rootCmd.PersistentFlags().BoolVarP(&verbose, "verbose", "v", false, "Enable verbose output")
	rootCmd.PersistentFlags().BoolVarP(&quiet, "quiet", "q", false, "Quiet mode, only show errors")
	
	// Add subcommands
	rootCmd.AddCommand(NewConvertCmd())
	rootCmd.AddCommand(NewValidateCmd())
	rootCmd.AddCommand(NewInfoCmd())
	rootCmd.AddCommand(NewPlatformsCmd())
	rootCmd.AddCommand(NewBatchCmd())
}

func main() {
	if err := rootCmd.Execute(); err != nil {
		if !quiet {
			fmt.Fprintf(os.Stderr, "Error: %v\n", wrapUserFriendlyError(err))
		}
		os.Exit(1)
	}
}

